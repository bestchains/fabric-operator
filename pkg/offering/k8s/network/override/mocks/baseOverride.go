// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	v1 "k8s.io/api/rbac/v1"
)

type BaseOverride struct {
	CreateClusterRoleStub        func(*v1beta1.Network, *v1.ClusterRole) error
	createClusterRoleMutex       sync.RWMutex
	createClusterRoleArgsForCall []struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRole
	}
	createClusterRoleReturns struct {
		result1 error
	}
	createClusterRoleReturnsOnCall map[int]struct {
		result1 error
	}
	CreateClusterRoleBindingStub        func(*v1beta1.Network, *v1.ClusterRoleBinding) error
	createClusterRoleBindingMutex       sync.RWMutex
	createClusterRoleBindingArgsForCall []struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRoleBinding
	}
	createClusterRoleBindingReturns struct {
		result1 error
	}
	createClusterRoleBindingReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateClusterRoleStub        func(*v1beta1.Network, *v1.ClusterRole) error
	updateClusterRoleMutex       sync.RWMutex
	updateClusterRoleArgsForCall []struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRole
	}
	updateClusterRoleReturns struct {
		result1 error
	}
	updateClusterRoleReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateClusterRoleBindingStub        func(*v1beta1.Network, *v1.ClusterRoleBinding) error
	updateClusterRoleBindingMutex       sync.RWMutex
	updateClusterRoleBindingArgsForCall []struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRoleBinding
	}
	updateClusterRoleBindingReturns struct {
		result1 error
	}
	updateClusterRoleBindingReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BaseOverride) CreateClusterRole(arg1 *v1beta1.Network, arg2 *v1.ClusterRole) error {
	fake.createClusterRoleMutex.Lock()
	ret, specificReturn := fake.createClusterRoleReturnsOnCall[len(fake.createClusterRoleArgsForCall)]
	fake.createClusterRoleArgsForCall = append(fake.createClusterRoleArgsForCall, struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRole
	}{arg1, arg2})
	fake.recordInvocation("CreateClusterRole", []interface{}{arg1, arg2})
	fake.createClusterRoleMutex.Unlock()
	if fake.CreateClusterRoleStub != nil {
		return fake.CreateClusterRoleStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createClusterRoleReturns
	return fakeReturns.result1
}

func (fake *BaseOverride) CreateClusterRoleCallCount() int {
	fake.createClusterRoleMutex.RLock()
	defer fake.createClusterRoleMutex.RUnlock()
	return len(fake.createClusterRoleArgsForCall)
}

func (fake *BaseOverride) CreateClusterRoleCalls(stub func(*v1beta1.Network, *v1.ClusterRole) error) {
	fake.createClusterRoleMutex.Lock()
	defer fake.createClusterRoleMutex.Unlock()
	fake.CreateClusterRoleStub = stub
}

func (fake *BaseOverride) CreateClusterRoleArgsForCall(i int) (*v1beta1.Network, *v1.ClusterRole) {
	fake.createClusterRoleMutex.RLock()
	defer fake.createClusterRoleMutex.RUnlock()
	argsForCall := fake.createClusterRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *BaseOverride) CreateClusterRoleReturns(result1 error) {
	fake.createClusterRoleMutex.Lock()
	defer fake.createClusterRoleMutex.Unlock()
	fake.CreateClusterRoleStub = nil
	fake.createClusterRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) CreateClusterRoleReturnsOnCall(i int, result1 error) {
	fake.createClusterRoleMutex.Lock()
	defer fake.createClusterRoleMutex.Unlock()
	fake.CreateClusterRoleStub = nil
	if fake.createClusterRoleReturnsOnCall == nil {
		fake.createClusterRoleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createClusterRoleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) CreateClusterRoleBinding(arg1 *v1beta1.Network, arg2 *v1.ClusterRoleBinding) error {
	fake.createClusterRoleBindingMutex.Lock()
	ret, specificReturn := fake.createClusterRoleBindingReturnsOnCall[len(fake.createClusterRoleBindingArgsForCall)]
	fake.createClusterRoleBindingArgsForCall = append(fake.createClusterRoleBindingArgsForCall, struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRoleBinding
	}{arg1, arg2})
	fake.recordInvocation("CreateClusterRoleBinding", []interface{}{arg1, arg2})
	fake.createClusterRoleBindingMutex.Unlock()
	if fake.CreateClusterRoleBindingStub != nil {
		return fake.CreateClusterRoleBindingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createClusterRoleBindingReturns
	return fakeReturns.result1
}

func (fake *BaseOverride) CreateClusterRoleBindingCallCount() int {
	fake.createClusterRoleBindingMutex.RLock()
	defer fake.createClusterRoleBindingMutex.RUnlock()
	return len(fake.createClusterRoleBindingArgsForCall)
}

func (fake *BaseOverride) CreateClusterRoleBindingCalls(stub func(*v1beta1.Network, *v1.ClusterRoleBinding) error) {
	fake.createClusterRoleBindingMutex.Lock()
	defer fake.createClusterRoleBindingMutex.Unlock()
	fake.CreateClusterRoleBindingStub = stub
}

func (fake *BaseOverride) CreateClusterRoleBindingArgsForCall(i int) (*v1beta1.Network, *v1.ClusterRoleBinding) {
	fake.createClusterRoleBindingMutex.RLock()
	defer fake.createClusterRoleBindingMutex.RUnlock()
	argsForCall := fake.createClusterRoleBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *BaseOverride) CreateClusterRoleBindingReturns(result1 error) {
	fake.createClusterRoleBindingMutex.Lock()
	defer fake.createClusterRoleBindingMutex.Unlock()
	fake.CreateClusterRoleBindingStub = nil
	fake.createClusterRoleBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) CreateClusterRoleBindingReturnsOnCall(i int, result1 error) {
	fake.createClusterRoleBindingMutex.Lock()
	defer fake.createClusterRoleBindingMutex.Unlock()
	fake.CreateClusterRoleBindingStub = nil
	if fake.createClusterRoleBindingReturnsOnCall == nil {
		fake.createClusterRoleBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createClusterRoleBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) UpdateClusterRole(arg1 *v1beta1.Network, arg2 *v1.ClusterRole) error {
	fake.updateClusterRoleMutex.Lock()
	ret, specificReturn := fake.updateClusterRoleReturnsOnCall[len(fake.updateClusterRoleArgsForCall)]
	fake.updateClusterRoleArgsForCall = append(fake.updateClusterRoleArgsForCall, struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRole
	}{arg1, arg2})
	fake.recordInvocation("UpdateClusterRole", []interface{}{arg1, arg2})
	fake.updateClusterRoleMutex.Unlock()
	if fake.UpdateClusterRoleStub != nil {
		return fake.UpdateClusterRoleStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateClusterRoleReturns
	return fakeReturns.result1
}

func (fake *BaseOverride) UpdateClusterRoleCallCount() int {
	fake.updateClusterRoleMutex.RLock()
	defer fake.updateClusterRoleMutex.RUnlock()
	return len(fake.updateClusterRoleArgsForCall)
}

func (fake *BaseOverride) UpdateClusterRoleCalls(stub func(*v1beta1.Network, *v1.ClusterRole) error) {
	fake.updateClusterRoleMutex.Lock()
	defer fake.updateClusterRoleMutex.Unlock()
	fake.UpdateClusterRoleStub = stub
}

func (fake *BaseOverride) UpdateClusterRoleArgsForCall(i int) (*v1beta1.Network, *v1.ClusterRole) {
	fake.updateClusterRoleMutex.RLock()
	defer fake.updateClusterRoleMutex.RUnlock()
	argsForCall := fake.updateClusterRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *BaseOverride) UpdateClusterRoleReturns(result1 error) {
	fake.updateClusterRoleMutex.Lock()
	defer fake.updateClusterRoleMutex.Unlock()
	fake.UpdateClusterRoleStub = nil
	fake.updateClusterRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) UpdateClusterRoleReturnsOnCall(i int, result1 error) {
	fake.updateClusterRoleMutex.Lock()
	defer fake.updateClusterRoleMutex.Unlock()
	fake.UpdateClusterRoleStub = nil
	if fake.updateClusterRoleReturnsOnCall == nil {
		fake.updateClusterRoleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateClusterRoleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) UpdateClusterRoleBinding(arg1 *v1beta1.Network, arg2 *v1.ClusterRoleBinding) error {
	fake.updateClusterRoleBindingMutex.Lock()
	ret, specificReturn := fake.updateClusterRoleBindingReturnsOnCall[len(fake.updateClusterRoleBindingArgsForCall)]
	fake.updateClusterRoleBindingArgsForCall = append(fake.updateClusterRoleBindingArgsForCall, struct {
		arg1 *v1beta1.Network
		arg2 *v1.ClusterRoleBinding
	}{arg1, arg2})
	fake.recordInvocation("UpdateClusterRoleBinding", []interface{}{arg1, arg2})
	fake.updateClusterRoleBindingMutex.Unlock()
	if fake.UpdateClusterRoleBindingStub != nil {
		return fake.UpdateClusterRoleBindingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateClusterRoleBindingReturns
	return fakeReturns.result1
}

func (fake *BaseOverride) UpdateClusterRoleBindingCallCount() int {
	fake.updateClusterRoleBindingMutex.RLock()
	defer fake.updateClusterRoleBindingMutex.RUnlock()
	return len(fake.updateClusterRoleBindingArgsForCall)
}

func (fake *BaseOverride) UpdateClusterRoleBindingCalls(stub func(*v1beta1.Network, *v1.ClusterRoleBinding) error) {
	fake.updateClusterRoleBindingMutex.Lock()
	defer fake.updateClusterRoleBindingMutex.Unlock()
	fake.UpdateClusterRoleBindingStub = stub
}

func (fake *BaseOverride) UpdateClusterRoleBindingArgsForCall(i int) (*v1beta1.Network, *v1.ClusterRoleBinding) {
	fake.updateClusterRoleBindingMutex.RLock()
	defer fake.updateClusterRoleBindingMutex.RUnlock()
	argsForCall := fake.updateClusterRoleBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *BaseOverride) UpdateClusterRoleBindingReturns(result1 error) {
	fake.updateClusterRoleBindingMutex.Lock()
	defer fake.updateClusterRoleBindingMutex.Unlock()
	fake.UpdateClusterRoleBindingStub = nil
	fake.updateClusterRoleBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) UpdateClusterRoleBindingReturnsOnCall(i int, result1 error) {
	fake.updateClusterRoleBindingMutex.Lock()
	defer fake.updateClusterRoleBindingMutex.Unlock()
	fake.UpdateClusterRoleBindingStub = nil
	if fake.updateClusterRoleBindingReturnsOnCall == nil {
		fake.updateClusterRoleBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateClusterRoleBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BaseOverride) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createClusterRoleMutex.RLock()
	defer fake.createClusterRoleMutex.RUnlock()
	fake.createClusterRoleBindingMutex.RLock()
	defer fake.createClusterRoleBindingMutex.RUnlock()
	fake.updateClusterRoleMutex.RLock()
	defer fake.updateClusterRoleMutex.RUnlock()
	fake.updateClusterRoleBindingMutex.RLock()
	defer fake.updateClusterRoleBindingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BaseOverride) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
