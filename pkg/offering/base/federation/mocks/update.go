// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/federation"
)

type Update struct {
	MemberUpdatedStub        func() bool
	memberUpdatedMutex       sync.RWMutex
	memberUpdatedArgsForCall []struct {
	}
	memberUpdatedReturns struct {
		result1 bool
	}
	memberUpdatedReturnsOnCall map[int]struct {
		result1 bool
	}
	ProposalActivatedStub        func() bool
	proposalActivatedMutex       sync.RWMutex
	proposalActivatedArgsForCall []struct {
	}
	proposalActivatedReturns struct {
		result1 bool
	}
	proposalActivatedReturnsOnCall map[int]struct {
		result1 bool
	}
	ProposalDissolvedStub        func() bool
	proposalDissolvedMutex       sync.RWMutex
	proposalDissolvedArgsForCall []struct {
	}
	proposalDissolvedReturns struct {
		result1 bool
	}
	proposalDissolvedReturnsOnCall map[int]struct {
		result1 bool
	}
	ProposalFailedStub        func() bool
	proposalFailedMutex       sync.RWMutex
	proposalFailedArgsForCall []struct {
	}
	proposalFailedReturns struct {
		result1 bool
	}
	proposalFailedReturnsOnCall map[int]struct {
		result1 bool
	}
	SpecUpdatedStub        func() bool
	specUpdatedMutex       sync.RWMutex
	specUpdatedArgsForCall []struct {
	}
	specUpdatedReturns struct {
		result1 bool
	}
	specUpdatedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Update) MemberUpdated() bool {
	fake.memberUpdatedMutex.Lock()
	ret, specificReturn := fake.memberUpdatedReturnsOnCall[len(fake.memberUpdatedArgsForCall)]
	fake.memberUpdatedArgsForCall = append(fake.memberUpdatedArgsForCall, struct {
	}{})
	stub := fake.MemberUpdatedStub
	fakeReturns := fake.memberUpdatedReturns
	fake.recordInvocation("MemberUpdated", []interface{}{})
	fake.memberUpdatedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Update) MemberUpdatedCallCount() int {
	fake.memberUpdatedMutex.RLock()
	defer fake.memberUpdatedMutex.RUnlock()
	return len(fake.memberUpdatedArgsForCall)
}

func (fake *Update) MemberUpdatedCalls(stub func() bool) {
	fake.memberUpdatedMutex.Lock()
	defer fake.memberUpdatedMutex.Unlock()
	fake.MemberUpdatedStub = stub
}

func (fake *Update) MemberUpdatedReturns(result1 bool) {
	fake.memberUpdatedMutex.Lock()
	defer fake.memberUpdatedMutex.Unlock()
	fake.MemberUpdatedStub = nil
	fake.memberUpdatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) MemberUpdatedReturnsOnCall(i int, result1 bool) {
	fake.memberUpdatedMutex.Lock()
	defer fake.memberUpdatedMutex.Unlock()
	fake.MemberUpdatedStub = nil
	if fake.memberUpdatedReturnsOnCall == nil {
		fake.memberUpdatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.memberUpdatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ProposalActivated() bool {
	fake.proposalActivatedMutex.Lock()
	ret, specificReturn := fake.proposalActivatedReturnsOnCall[len(fake.proposalActivatedArgsForCall)]
	fake.proposalActivatedArgsForCall = append(fake.proposalActivatedArgsForCall, struct {
	}{})
	stub := fake.ProposalActivatedStub
	fakeReturns := fake.proposalActivatedReturns
	fake.recordInvocation("ProposalActivated", []interface{}{})
	fake.proposalActivatedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Update) ProposalActivatedCallCount() int {
	fake.proposalActivatedMutex.RLock()
	defer fake.proposalActivatedMutex.RUnlock()
	return len(fake.proposalActivatedArgsForCall)
}

func (fake *Update) ProposalActivatedCalls(stub func() bool) {
	fake.proposalActivatedMutex.Lock()
	defer fake.proposalActivatedMutex.Unlock()
	fake.ProposalActivatedStub = stub
}

func (fake *Update) ProposalActivatedReturns(result1 bool) {
	fake.proposalActivatedMutex.Lock()
	defer fake.proposalActivatedMutex.Unlock()
	fake.ProposalActivatedStub = nil
	fake.proposalActivatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ProposalActivatedReturnsOnCall(i int, result1 bool) {
	fake.proposalActivatedMutex.Lock()
	defer fake.proposalActivatedMutex.Unlock()
	fake.ProposalActivatedStub = nil
	if fake.proposalActivatedReturnsOnCall == nil {
		fake.proposalActivatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.proposalActivatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ProposalDissolved() bool {
	fake.proposalDissolvedMutex.Lock()
	ret, specificReturn := fake.proposalDissolvedReturnsOnCall[len(fake.proposalDissolvedArgsForCall)]
	fake.proposalDissolvedArgsForCall = append(fake.proposalDissolvedArgsForCall, struct {
	}{})
	stub := fake.ProposalDissolvedStub
	fakeReturns := fake.proposalDissolvedReturns
	fake.recordInvocation("ProposalDissolved", []interface{}{})
	fake.proposalDissolvedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Update) ProposalDissolvedCallCount() int {
	fake.proposalDissolvedMutex.RLock()
	defer fake.proposalDissolvedMutex.RUnlock()
	return len(fake.proposalDissolvedArgsForCall)
}

func (fake *Update) ProposalDissolvedCalls(stub func() bool) {
	fake.proposalDissolvedMutex.Lock()
	defer fake.proposalDissolvedMutex.Unlock()
	fake.ProposalDissolvedStub = stub
}

func (fake *Update) ProposalDissolvedReturns(result1 bool) {
	fake.proposalDissolvedMutex.Lock()
	defer fake.proposalDissolvedMutex.Unlock()
	fake.ProposalDissolvedStub = nil
	fake.proposalDissolvedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ProposalDissolvedReturnsOnCall(i int, result1 bool) {
	fake.proposalDissolvedMutex.Lock()
	defer fake.proposalDissolvedMutex.Unlock()
	fake.ProposalDissolvedStub = nil
	if fake.proposalDissolvedReturnsOnCall == nil {
		fake.proposalDissolvedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.proposalDissolvedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ProposalFailed() bool {
	fake.proposalFailedMutex.Lock()
	ret, specificReturn := fake.proposalFailedReturnsOnCall[len(fake.proposalFailedArgsForCall)]
	fake.proposalFailedArgsForCall = append(fake.proposalFailedArgsForCall, struct {
	}{})
	stub := fake.ProposalFailedStub
	fakeReturns := fake.proposalFailedReturns
	fake.recordInvocation("ProposalFailed", []interface{}{})
	fake.proposalFailedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Update) ProposalFailedCallCount() int {
	fake.proposalFailedMutex.RLock()
	defer fake.proposalFailedMutex.RUnlock()
	return len(fake.proposalFailedArgsForCall)
}

func (fake *Update) ProposalFailedCalls(stub func() bool) {
	fake.proposalFailedMutex.Lock()
	defer fake.proposalFailedMutex.Unlock()
	fake.ProposalFailedStub = stub
}

func (fake *Update) ProposalFailedReturns(result1 bool) {
	fake.proposalFailedMutex.Lock()
	defer fake.proposalFailedMutex.Unlock()
	fake.ProposalFailedStub = nil
	fake.proposalFailedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ProposalFailedReturnsOnCall(i int, result1 bool) {
	fake.proposalFailedMutex.Lock()
	defer fake.proposalFailedMutex.Unlock()
	fake.ProposalFailedStub = nil
	if fake.proposalFailedReturnsOnCall == nil {
		fake.proposalFailedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.proposalFailedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) SpecUpdated() bool {
	fake.specUpdatedMutex.Lock()
	ret, specificReturn := fake.specUpdatedReturnsOnCall[len(fake.specUpdatedArgsForCall)]
	fake.specUpdatedArgsForCall = append(fake.specUpdatedArgsForCall, struct {
	}{})
	stub := fake.SpecUpdatedStub
	fakeReturns := fake.specUpdatedReturns
	fake.recordInvocation("SpecUpdated", []interface{}{})
	fake.specUpdatedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Update) SpecUpdatedCallCount() int {
	fake.specUpdatedMutex.RLock()
	defer fake.specUpdatedMutex.RUnlock()
	return len(fake.specUpdatedArgsForCall)
}

func (fake *Update) SpecUpdatedCalls(stub func() bool) {
	fake.specUpdatedMutex.Lock()
	defer fake.specUpdatedMutex.Unlock()
	fake.SpecUpdatedStub = stub
}

func (fake *Update) SpecUpdatedReturns(result1 bool) {
	fake.specUpdatedMutex.Lock()
	defer fake.specUpdatedMutex.Unlock()
	fake.SpecUpdatedStub = nil
	fake.specUpdatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) SpecUpdatedReturnsOnCall(i int, result1 bool) {
	fake.specUpdatedMutex.Lock()
	defer fake.specUpdatedMutex.Unlock()
	fake.SpecUpdatedStub = nil
	if fake.specUpdatedReturnsOnCall == nil {
		fake.specUpdatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.specUpdatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.memberUpdatedMutex.RLock()
	defer fake.memberUpdatedMutex.RUnlock()
	fake.proposalActivatedMutex.RLock()
	defer fake.proposalActivatedMutex.RUnlock()
	fake.proposalDissolvedMutex.RLock()
	defer fake.proposalDissolvedMutex.RUnlock()
	fake.proposalFailedMutex.RLock()
	defer fake.proposalFailedMutex.RUnlock()
	fake.specUpdatedMutex.RLock()
	defer fake.specUpdatedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Update) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ federation.Update = new(Update)
