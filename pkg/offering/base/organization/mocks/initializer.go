// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/organization"
)

type InitializerOrganization struct {
	CreateOrUpdateOrgMSPSecretStub        func(*v1beta1.Organization) error
	createOrUpdateOrgMSPSecretMutex       sync.RWMutex
	createOrUpdateOrgMSPSecretArgsForCall []struct {
		arg1 *v1beta1.Organization
	}
	createOrUpdateOrgMSPSecretReturns struct {
		result1 error
	}
	createOrUpdateOrgMSPSecretReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InitializerOrganization) CreateOrUpdateOrgMSPSecret(arg1 *v1beta1.Organization) error {
	fake.createOrUpdateOrgMSPSecretMutex.Lock()
	ret, specificReturn := fake.createOrUpdateOrgMSPSecretReturnsOnCall[len(fake.createOrUpdateOrgMSPSecretArgsForCall)]
	fake.createOrUpdateOrgMSPSecretArgsForCall = append(fake.createOrUpdateOrgMSPSecretArgsForCall, struct {
		arg1 *v1beta1.Organization
	}{arg1})
	fake.recordInvocation("CreateOrUpdateOrgMSPSecret", []interface{}{arg1})
	fake.createOrUpdateOrgMSPSecretMutex.Unlock()
	if fake.CreateOrUpdateOrgMSPSecretStub != nil {
		return fake.CreateOrUpdateOrgMSPSecretStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createOrUpdateOrgMSPSecretReturns
	return fakeReturns.result1
}

func (fake *InitializerOrganization) CreateOrUpdateOrgMSPSecretCallCount() int {
	fake.createOrUpdateOrgMSPSecretMutex.RLock()
	defer fake.createOrUpdateOrgMSPSecretMutex.RUnlock()
	return len(fake.createOrUpdateOrgMSPSecretArgsForCall)
}

func (fake *InitializerOrganization) CreateOrUpdateOrgMSPSecretCalls(stub func(*v1beta1.Organization) error) {
	fake.createOrUpdateOrgMSPSecretMutex.Lock()
	defer fake.createOrUpdateOrgMSPSecretMutex.Unlock()
	fake.CreateOrUpdateOrgMSPSecretStub = stub
}

func (fake *InitializerOrganization) CreateOrUpdateOrgMSPSecretArgsForCall(i int) *v1beta1.Organization {
	fake.createOrUpdateOrgMSPSecretMutex.RLock()
	defer fake.createOrUpdateOrgMSPSecretMutex.RUnlock()
	argsForCall := fake.createOrUpdateOrgMSPSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *InitializerOrganization) CreateOrUpdateOrgMSPSecretReturns(result1 error) {
	fake.createOrUpdateOrgMSPSecretMutex.Lock()
	defer fake.createOrUpdateOrgMSPSecretMutex.Unlock()
	fake.CreateOrUpdateOrgMSPSecretStub = nil
	fake.createOrUpdateOrgMSPSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *InitializerOrganization) CreateOrUpdateOrgMSPSecretReturnsOnCall(i int, result1 error) {
	fake.createOrUpdateOrgMSPSecretMutex.Lock()
	defer fake.createOrUpdateOrgMSPSecretMutex.Unlock()
	fake.CreateOrUpdateOrgMSPSecretStub = nil
	if fake.createOrUpdateOrgMSPSecretReturnsOnCall == nil {
		fake.createOrUpdateOrgMSPSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOrUpdateOrgMSPSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *InitializerOrganization) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrUpdateOrgMSPSecretMutex.RLock()
	defer fake.createOrUpdateOrgMSPSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *InitializerOrganization) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ organization.InitializerOrganization = new(InitializerOrganization)
